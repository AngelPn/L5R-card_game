Βασιλάκης Βασίλης (sdi1800018) και Παναγοπούλου Αγγελική (sdi1800141) - Ομαδική Εργασία OOP

Αρχεία
    • Card.hpp
        Κλάσεις Card, GreenCard, BlackCard

    • Follower.hpp
        Κλάση Follower και τα είδη της: Footsoldier, Archer, Cavalry, Bushido, Sieger, Atakebune

    • Item.hpp
        Κλάση Item και τα είδη της: Katana, Spear, Bow, Ninjato, Wakizashi

    • Holding.hpp
        Κλάση Holding και τα είδη της: Plain, Mine, GoldMine, CrystalMine, Farmland, GiftsandFavour, Stronghold

    • Personality.hpp/Personality.cpp
        Κλάση Personality και τα είδη της: Attacker, Defender, Champion, Chancellor, Shogun
        Στο Personality.cpp περιέχονται οι συναρτήσεις της κλάσης Personality

    • Player.hpp/Player.cpp
        Κλάση Player

    • GameBoard.hpp/GameBoard.cpp
        Κλάση GameBoard

    • DeckBuilder.hpp/DeckBuilder.cpp και TypeConverter.hpp/TypeConverter.cpp
        Τα βοητικά αρχεία της εργασίας που δόθηκαν

    • CardTextes.txt
        Ιαπωνικές φράσεις που εισάγονται στο πεδίο cardText των GreenCard

    • main.cpp
        Η συνάρτηση main

    • Makefile

Μεταγλώττιση
    • g++ -o ex main.cpp DeckBuilder.cpp Personality.cpp Player.cpp GameBoard.cpp TypeConverter.cpp

Εκτέλεση
    • ./ex

Τρόπος παιξίματος
	Έχει υλοποιηθεί η διαδικασία παιξίματος. Η υλοποίηση στρατηγικών παιξίματος γίνεται με χειρωνακτικό τρόπο, δηλαδή οι users του προγράμματος, ως παίχτες, καθορίζουν οι ίδιοι το παιχνίδι μέσα από τις επιλογές τους. Ο έλγχος της ροής του παιχνιδιού και η εναλλαγή φάσεων γίνεται αυτόματα από το πρόγραμμα. Κατά την εκτέλεση του προγράμματος, ο user δίνει τον αριθμό των παιχτών και ύστερα τα ονόματά τους. Εκτυπώνονται οι κατάλληλες κάρτες και τα κατάλληλα μηνύματα κάθε φορά που προσδιορίζουν σε ποια φάση του παιχνιδιού βρίσκονται, ποιος έχει σειρά να παίξει και τι επιλογές μπορεί να κάνει μέσα από ερωτήσεις. Στα περισσότερα inputs που μπορεί να δώσει ο χρήστης έχει οριστεί handling error, ωστόσο παρακαλείσθε να είστε προσεχτικός/η, οι ερωτήσεις διατυπώνουν ακριβώς τι μπορεί να πληκτρολογήσει ο χρήστης. 
	Καλή διασκέδαση!

Αναπαραστάσεις δεδομένων- Παραδοχές- Αιτιολογήσεις σχεδιαστικών επιλογών
    1. Card.hpp
        • Η κλάση Card είναι abstract και οι κλάσεις GreenCard, BlackCard είναι υποκλάσεις αυτής.
        • Στην κλάση Card τα μέλη-δεδομένα cost και isTapped είναι protected για να μπορούν να αρχικοποιηθούν ή να τροποποιηθούν στις υποκλάσεις της. Ομοίως για την GreenCard και τα μέλη της attackBonus, defenseBonus, minimumHonor, effectBonus, effectCost.
        • Constructor της GreenCard: Το πεδίο cardText αρχικοποιείται από φράσεις του αρχείου CardTextes.txt.

    2. Follower.hpp, Item.hpp, Holding.hpp, Personality.hpp/Personality.cpp
        Τα πεδία τους αρχικοποιύνται ανάλογα το type τους με τις τιμές που έχουν δοθεί στα βοηθητικά αρχεία της εργασίας Followers_and_Weapons.txt και Personalities_and_Holdings.txt

    3. Player.hpp/ Player.cpp
        • Η κεντρική ιδέα , ως προς τη μνήμη, είναι οι κάρτες (το deck) κάθε παίχτη να δημιουργείται μια φορά μόνο, στον constructor του Deckbuilder, και από εκεί και πέρα, όλες οι άλλες συλλογές καρτών (hand, holdings, army κλπ) να αναπαρίστανται με μια δομή δεδομένων(vector ή λίστα) με στοιχεία δείκτες σε αυτές τις κάρτες.
        Και συνεπώς να γίνονται desruct μόνο μια φορά στον destructor του deckbuilder, o οποίος έχει προσαρμοστεί κατάλληλα.
        
        • Τα fateDeck, dynastyDeck είναι δείκτες σε λίστες από δείκτες σε πράσινες, μαύρες κάρτες αντίστοιχα που δημιουργούνται με new και default copy constructing με όρισμα τα αντίστοιχα green , black μέλη του deckbuilder deck. Με αυτόν τον τρόπο έχουμε πρόσβαση στις κάρτες του deckbuilder χωρίς να χρειαστεί ορισμός accessor στο DeckBuilder.
        NOTE: Το default copy constructing αρκεί καθώς απλά γίνεται member wise copy δεικτών, δηλαδή οι δείκτες του fateDeck, dynastyDeck θα δείχνουν ακριβώς εκεί που δείχνουν και οι δείκτες του green , black του deckbuilder, και μετά η deckShuffler απλά αλλάζει τη σειρά των στοιχείων (των δεικτών δηλαδή) και όχι το που δείχνουν οι δείκτες.
        
        • Όλες οι φάσεις μαζί με τις συναρτήσεις τους είναι συναρτήσεις μέλη του player
      
        • startingPhase:
        	Όλες οι συναρτήσεις είναι αρκετά αυτονόητες και απλές.

        • equipPhase :
        	Όπως βλέπει κάποιος, έγινε εφαρμογή χειρωνακτικού τρόπου παιξίματος. Αρχικά ελέγχεται αν υπάρχει στρατός , αν δεν υπάρχει τότε η φάση γίνεται skip.
        	Επιπλέον, δίνεται η δυνατότητα στον παίχτη να κάνει tap κάποια από τα holdings του αν έχει (πλην του stronghold, το οποίο θεωρείται holding, αλλά ως προς το tapping παραλείπεται) για παραπάνω χρήματα στο round. Κάθε φορά που πρέπει να γίνει μια απόφαση για τον παίχτη, (πχ έλεγχος χρημάτων, έλεγχος προϋποθέσεων για μια αγορά), έχουν τυπωθεί οι αντίστοιχες κάρτες ήδη στην οθόνη με τα κατάλληλα πεδία.
        	Μετά, όσο ο παίχτης έχει χρήματα και το επιθυμεί (ερωτάται σε κάθε επανάληψη), επιλέγει μια προσωπικότητα του στρατού του κι έπειτα μια κάρτα από το χέρι του για να την εξοπλίσει στην επιλεγμένη προσωπικότητα. Αν πληρούνται όλοι οι περιορισμοί τότε η αγορά γίνεται, και έπειτα ερωτάται ξανά ο παίχτης εάν θέλει να αγοράσει το bonus της κάρτας. Έπειτα προστίθεται αυτή η κάρτα, αν είναι item στη λίστα με items και αν είναι follower στη λίστα των followers της συγκεκριμένης προσωπικότητας (ο διαχωρισμός γίνεται με χρήση του typeconverter που παρέχεται στα έτοιμα αρχεία) σύμφωνα πάντα με το ανώτατο όριο green cards της προσωπικότητας το οποίο έχει ορισθεί σαν επιπλέον data member σε κάθε προσωπικότητα.

        • battlePhase:
           Αρχικά, ο παίχτης επιλέγει πόσες untapped Personalities από το Army θα είναι στο Arena για defense/battle και ποιες από αυτές συγκεκριμένα (πρέπει να επιλέξει διαφορετικές κάρτες από το Army). Εκτυπώνεται το Army για να γίνουν οι επιλογές. Επαναπροσδιορίζεται η Arena οπότε και καταστρέφεται η προηγούμενη. Η Arena είναι ένα vector από integers που κάθε integer είναι ένα index στο vector Army. Εκτυπώνεται η Arena. Αν ο παίχτης έχει διαλέξει Battle, εκτυπώνονται οι επαρχίες του αντιπάλου που έχει επιλέξει από το gameplay και διαλέγει μια επαρχία να επιτεθεί. Υπολογίζονται οι συνολικοί πόντοι του επιτιθέμενου και του αμυνόμενου. Η άμυνα της επαρχίας είναι το initialDefense του Stronghold. Εκτυπώνονται οι πόντοι. Η διαδικασία χωρίζεται σε περιπτώσεις όπως ορίζει η εκφώνηση. Στο τέλος κάθε περίπτωσης, εκτυπώνεται αντίστοιχο μήνυμα. Στην περίπτωση που ο επιτιθέμενος επιζήσει αλλά δεν έχει βγει νικητής, οι προσωπικότητες και οι ακόλουθοί τους γίνονται tap και τα αντικείμενα χάνουν ένα durability. Οι επιζήσαντες προσωπικότητες χάνουν έναν πόντο εντιμότητας. Εκτυπώνεται η Arena του επιτιθέμενου και του αμυνόμενου, δηλαδή οι επιζήσαντες προσωπικότητες με τα νέα δεδομένα.

        • economyPhase:
        	Η φάση αγορών έχει παρόμοιο layout με τη φάση εξοπλισμού.  Όπως ακριβώς με τη φάση εξοπλισμού, ο παίχτης εφόσον έχει χρήματα και το επιθυμεί (πάλι ερωτάται σε κάθε επανάληψη), αγοράζει απο τις not revealed επαρχίες του, και έπειτα η κάρτα είτε personality είτε holding προστίθεται στο army ή στα holdings του παίχτη (ο διαχωρισμός γίνεται πάλι με την ΤypeConverter).  Επίσης πριν από οποιαδήποτε αγορά , πάλι ερωτάται εάν θέλει να κάνει tap κάποια από τα holdings του, τα οποία δεν έχουν γίνει tap από τη φάση εξοπλισμού, για έξτρα χρήματα. Ιδιαίτερη μεταχείριση έχουν η αγορές επαρχιών που είναι holdings, καθώς τότε ελέγχονται όλα τα υπάρχοντα holdings για πιθανές συνδέσεις σε αλυσίδες (checkChains). Αν δεν βρεθεί κάποια σύνδεση τότε δεν γίνεται τίποτα and we go on with our day, αν όμως βρεθεί κάποια σύνδεση , αφότου αποφασιστεί όντως η συγκεκριμένη σύνδεση (μπορεί να υπάρχουν παραπάνω από μια συνδέσεις), γίνεται η απαραίτητη αμφίδρομη συνδεσμολογία (upper holding, sub holding) και έπειτα ανανεώνονται και τα harvest values των συμπεριλαμβανόμενων στην σύνδεση holdings σύμφωνα με τα bonus της εκφώνησης (equipBonus στο Holding.cpp).
        	NOTE: Τα upperHolding, subHolding είναι data members του Holding, και είναι δείκτες σε holdings, αρχικοποιημένοι σε NULL κάτι που δηλώνει την έλλειψη σύνδεσης.

        • endingPhase:
        	Όπως και στην αρχική φάση, οι συναρτήσεις εδώ είναι pretty straightforward, κυρίως τυπώσεις. Ενδιαφέρον έχει η συνάρτηση discardSurplusFateCards, η οποία ελέγχει αν και πόσες κάρτες παραπάνω στο χέρι του έχει ο παίχτης, και του ζητάει να τις κάνει discard. Oι κάρτες τυπώνονται πριν βέβαια, ώστε ο παίχτης να μπορεί να κάνει την επιλογή του. Εφόσον επιλέξει μια κάρτα να γίνει discard αυτή η κάρτα γίνεται erase από το vector hand του παίχτη (ουσιαστικά γίνεται erase ο δείκτης αφού το hand οπως είπαμε είναι vector με στοιχεία δείκτες σε πράσινες κάρτες) και δεν είναι ξανά διαθέσιμη αφού κανένας δείκτης δεν δείχνει σε αυτή παρά ο δείκτης του deckBuilder που θα την κάνει και destruct στο τέλος της εκτέλεσης του προγράμματος.

    4. GameBoard.hpp/GameBoard.cpp
        • initializeGameBoard:
            Ως όρισμα δίνεται ο αριθμός των παιχτών καθώς το πλήθος των διάφορων κατηγοριών καρτών που επιτρέπεται να έχουν στην κατοχή τους οι παίχτες ορίζεται από το βοηθητικό αρχείο DeckBuilder.hpp που δόθηκε.
        • checkWinningCondition:
            Η συνάρτηση ελέγχει τον αριθμό των επαρχιών κάθε παίχτη. Σε περίπτωση που έχουν καταστραφεί οι επαρχίες όλων των παιχτών εκτός από έναν, αυτός είναι ο νικητής και επιστρέφεται η σειρά προτεραιότητας παιξίματός του. Διαφορετικά, η συνάρτηση επιστρέφει -1.
        • gameplay:
            Εκτελούνται γύροι μέχρι να βρεθεί νικητής. Κάθε φάση εκτελείται από όλους τους παίχτες σύμφωνα με τη σειρά προτεραιότητας. Αν έχουν καταστραφεί όλες οι επαρχίες ενός παίχτη σημαίνει ότι έχει χάσει, επομένως δεν συμμετέχει στις φάσεις παιχνιδιού. Η checkWinningCondition εκτελείται μετά από κάθε Battle Phase.
